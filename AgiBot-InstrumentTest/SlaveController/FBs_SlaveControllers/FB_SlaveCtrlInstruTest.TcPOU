<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlInstruTest" Id="{d70115e7-7668-49fd-9f57-bdf3458ba446}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm test
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlInstruTest EXTENDS FB_SlaveArmCtrlBase
VAR CONSTANT
	m_instruAutoTestTrajNum :INT :=3;
	m_instruVerifyTrajNum :INT :=3;
END_VAR
VAR
	// test mode. 
	//0: stay still; 
	//1: manual joint test ; 
	//2: instrument control verify 
	//3: auto test - finger grip and release
	//4: auto test - finger open and mvoe
	//5: auto test - finger grip and move
	m_instruTestMode :INT := 0;
	m_lastInstruTestMode :INT := 0;
	
	// variables for auto test
	m_autoTestCycles :INT :=0;
	m_autoTestStep :INT :=0;
	m_autoTestTime :LREAL:=0;
	m_instruAutoTestPos:ARRAY [1..m_instruAutoTestTrajNum, 1..3] OF LREAL:=
	[pi/2, 	-135*g_deg2rad,	-45*g_deg2rad,
	 -pi/2,	-15*g_deg2rad, 	60*g_deg2rad,
	 0,		-pi/2, 0];																			
	
	// variable for instument control veify
	m_verifyTestStep :INT :=0;
	m_reachVerifyPos : BOOL := FALSE;
	m_instruVerifyPos:ARRAY [1..m_instruVerifyTrajNum, 1..3] OF LREAL:=
	[pi/2, 	-135*g_deg2rad,	-45*g_deg2rad,
	 -pi/2,	-15*g_deg2rad, 	60*g_deg2rad,
	 0,		-pi/2, 0];		

	// final target DH joint position and grip angle
	m_targetDHJntPos:Vec3d;
	m_targetGripAng:LREAL;
	m_targetGripForceLevel :LREAL :=0;
	
	// interploated command joint position and grip angle 
	m_cmdDHJntPos :Vec6d;
	m_cmdDHJntVel :Vec6d;
	m_cmdGripAng:LREAL;

	// last joint position 
	m_lastCmdJntPos :Vec8d ;
	
	// instrument controller
	m_instruController : FB_BasicInstruControl;
	m_usKnifeController : FB_UltrosonicKnifeControl;
	m_instruCmdJntPos,m_instruCmdJntVel : Vec5d;
	m_instruCmdJntTrq :Vec5d;
	
	// OTG
	m_DHJntOTG:ARRAY[1..3] OF FB_secOrdTrajFilter;
	m_gripAngleOTG : FB_secOrdTrajFilter;
	m_maxJntVel:Vec3d:=[3(2.0)];
	m_maxJntAcc:Vec3d:=[3(4.0)];

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{fabdb455-5225-4307-a367-b36816d27b6f}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// determint instrument test mode
m_instruTestMode := determinTestMode();

// determine final target DH joint position
CASE m_instruTestMode OF
	1:
		manualTest(i_slaveArm);
	2:
		instruVerifyTest(i_slaveArm);
	3:
		fingerOpenCloseTest(i_slaveArm);
	4:
		fingerOpenMoveTest(i_slaveArm);
	5:
		fingerGripMoveTest(i_slaveArm);
	ELSE
		m_lastInstruTestMode := m_instruTestMode;
		stayStill(i_slaveArm);
		RETURN;
END_CASE

// run OTG
FOR i:=1 TO 3  DO
	m_DHJntOTG[i].run(m_targetDHJntPos[i],0.0, o_cmdAcc=>,o_cmdVel=>m_cmdDHJntVel[i],o_cmdPos=> m_cmdDHJntPos[i+3]);
END_FOR
m_gripAngleOTG.run(m_targetGripAng,0.0, o_cmdAcc=>,o_cmdVel=>,o_cmdPos=>m_cmdGripAng);

// calculate target motor joint position from DH joint position
i_slaveArm.instrument.instruIK(m_cmdDHJntPos,m_cmdGripAng, o_jntPos=>m_cmdJntPos);

// command velocity
vecSub(m_cmdJntPos, m_lastCmdJntPos, m_cmdJntVel);
vecSelfMultiNum(m_cmdJntVel, g_slaveArmCtrlFreq);
m_lastCmdJntPos:=m_cmdJntPos;

m_lastInstruTestMode := m_instruTestMode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{89cc8590-b0ea-4a29-944b-9b994680a8df}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	nullspaceMat :Mat7d;
	ctrlTrq : Vec7d;
	i : int ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

// instrument joint control
FOR i:=1 TO 5 DO 
	m_instruCmdJntPos[i]:=m_cmdJntPos[i+3];
	m_instruCmdJntVel[i]:=m_cmdJntVel[i+3];
END_FOR

IF i_slaveArm.instrument.instruType = InstruType_UltrasoundKnifeS OR i_slaveArm.instrument.instruType = InstruType_UltrasoundKnifeU THEN
	m_usKnifeController.run(m_instruCmdJntPos,m_instruCmdJntVel, m_targetGripForceLevel, i_slaveArm, o_cmdJntTrq=>m_instruCmdJntTrq);
ELSE
	m_instruController.run(m_instruCmdJntPos,m_instruCmdJntVel, m_cmdDHJntPos[6], m_cmdDHJntVel[6], m_targetGripForceLevel, i_slaveArm, o_cmdJntTrq=>m_instruCmdJntTrq);
END_IF

FOR i:=1 TO 5 DO
	m_cmdJntTrq[i+3]:=m_instruCmdJntTrq[i];
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="determinTestMode" Id="{873d96b2-7877-4cfa-9ab1-26e8410379b0}">
      <Declaration><![CDATA[METHOD determinTestMode : INT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[determinTestMode :=0;
IF GVL_InstruTestUIVars.g_instruManulTestFlag THEN
	determinTestMode := 1;
END_IF;

IF GVL_InstruTestUIVars.g_instruPosVerifyFlag THEN
	determinTestMode := 2;
ELSE
	m_verifyTestStep :=0;
END_IF

IF GVL_InstruTestUIVars.g_instruAutoTestFlag THEN
	determinTestMode := GVL_InstruTestUIVars.g_instruAutoTestMode +3; 
ELSE
	m_autoTestCycles := 0;
	m_autoTestStep :=0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="fingerGripMoveTest" Id="{b23b170a-3eed-478e-a97c-17d1ca24b714}">
      <Declaration><![CDATA[METHOD fingerGripMoveTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_targetGripForceLevel :=100;
m_autoTestStep := LIMIT(0,m_autoTestStep, m_instruAutoTestTrajNum-1);
FOR i:=1 TO 3 DO
	 m_targetDHJntPos[i] := m_instruAutoTestPos[m_autoTestStep+1, i];
END_FOR
	 
IF ABS(m_cmdDHJntPos[4]-m_targetDHJntPos[1])< g_jntCtrlAngTolLow AND ABS(m_cmdDHJntPos[5]-m_targetDHJntPos[2])< g_jntCtrlAngTolLow 
		AND ABS(m_cmdDHJntPos[6]-m_targetDHJntPos[3])< g_jntCtrlAngTolLow  THEN
	m_autoTestStep :=m_autoTestStep + 1;
END_IF
 
IF m_autoTestStep >= m_instruAutoTestTrajNum THEN
	m_autoTestCycles := m_autoTestCycles + 1;
	m_autoTestStep := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="fingerOpenCloseTest" Id="{7cc8daed-3bf9-42ca-9d17-f827b074e621}">
      <Declaration><![CDATA[METHOD fingerOpenCloseTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_targetGripForceLevel :=0;
m_autoTestStep := LIMIT(0,m_autoTestStep, 1);
IF m_autoTestStep =0 THEN
	m_targetGripAng := i_slaveArm.instrument.kinematicParameters.m_maxGripAngle;
ELSE
	m_targetGripAng := 0;
END_IF
m_targetDHJntPos[1] := 0;
m_targetDHJntPos[2] := -pi/2;
m_targetDHJntPos[3] := 0;

IF ABS(m_cmdGripAng- m_targetGripAng)< g_jntCtrlAngTolLow THEN
	 m_autoTestStep :=m_autoTestStep + 1;
END_IF

IF m_autoTestStep > 1 THEN
	m_autoTestCycles := m_autoTestCycles + 1;
	m_autoTestStep := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="fingerOpenMoveTest" Id="{9c6e0ab8-ec0f-4e57-8c89-55d8aad6317c}">
      <Declaration><![CDATA[METHOD fingerOpenMoveTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_targetGripForceLevel :=0;
m_autoTestStep := LIMIT(0,m_autoTestStep, m_instruAutoTestTrajNum-1);
FOR i:=1 TO 3 DO
	 m_targetDHJntPos[i] := m_instruAutoTestPos[m_autoTestStep+1, i];
END_FOR
	 
IF ABS(m_cmdDHJntPos[4]-m_targetDHJntPos[1])< g_jntCtrlAngTolLow AND ABS(m_cmdDHJntPos[5]-m_targetDHJntPos[2])< g_jntCtrlAngTolLow 
		AND ABS(m_cmdDHJntPos[6]-m_targetDHJntPos[3])< g_jntCtrlAngTolLow  THEN
	m_autoTestStep :=m_autoTestStep + 1;
END_IF
 
IF m_autoTestStep >= m_instruAutoTestTrajNum THEN
	m_autoTestCycles := m_autoTestCycles + 1;
	m_autoTestStep := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{1224d61d-417a-4654-acf9-99ef0220f449}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i:int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_lastCmdJntPos:=m_cmdJntPos;
m_jntOPMode[1] := DriverOPMode_PosTrq;
m_jntOPMode[2] := DriverOPMode_PosTrq;
m_jntOPMode[3] := DriverOPMode_PosTrq;
m_jntOPMode[4] := DriverOPMode_Trq;
m_jntOPMode[5] := DriverOPMode_Trq;
m_jntOPMode[6] := DriverOPMode_Trq;
m_jntOPMode[7] := DriverOPMode_Trq;
m_jntOPMode[8] := DriverOPMode_Trq;

m_cmdDHJntPos :=i_slaveArm.curDHJntPos;
m_cmdDHJntVel :=g_zeroVec6d;
m_targetGripAng := i_slaveArm.curGripAngle;
m_targetDHJntPos[1] := i_slaveArm.curDHJntPos[4];
m_targetDHJntPos[2] := i_slaveArm.curDHJntPos[5];
m_targetDHJntPos[3] := i_slaveArm.curDHJntPos[6];

// init instrument controller
m_instruController.init(i_slaveArm);
m_usKnifeController.init(i_slaveArm);

FOR i:=1 TO 3  DO
	m_DHJntOTG[i].init(m_cmdDHJntPos[i+3], 0, m_maxJntVel[i], m_maxJntAcc[i], g_slaveArmCtrlCycleTime);
END_FOR

m_gripAngleOTG.init(m_targetGripAng, 0, 2*m_maxJntVel[3], 2*m_maxJntAcc[3], g_slaveArmCtrlCycleTime);
// update commands to arm
copyCmds(r_slaveArmCtrlCmd);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="instruVerifyTest" Id="{32fd7dea-b530-44b3-81c2-23f19fa7b97f}">
      <Declaration><![CDATA[METHOD instruVerifyTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_targetGripForceLevel :=0;
m_autoTestStep := LIMIT(0,m_autoTestStep, m_instruVerifyTrajNum-1);
IF m_verifyTestStep = 0 THEN
	m_targetGripAng := i_slaveArm.instrument.kinematicParameters.m_maxGripAngle;
ELSE
	m_targetGripAng := 0;
END_IF

FOR i:=1 TO 3 DO
	 m_targetDHJntPos[1] := m_instruVerifyPos[m_verifyTestStep+1, i];
END_FOR
	 
m_reachVerifyPos := ABS(m_cmdDHJntPos[4]-m_targetDHJntPos[1])< g_jntCtrlAngTolLow AND ABS(m_cmdDHJntPos[5]-m_targetDHJntPos[2])< g_jntCtrlAngTolLow 
		AND ABS(m_cmdDHJntPos[6]-m_targetDHJntPos[3])< g_jntCtrlAngTolLow ; 

IF  GVL_InstruTestUIVars.g_instruPosVerifyNextStepFlag THEN
	m_verifyTestStep :=m_verifyTestStep + 1;
ELSIF  GVL_InstruTestUIVars.g_instruPosVerifyLastStepFlag THEN
	m_verifyTestStep :=m_verifyTestStep - 1;
END_IF
 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="manualTest" Id="{35aef409-4f2b-4e32-b983-7a5a4b214e71}">
      <Declaration><![CDATA[METHOD manualTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GVL_InstruTestUIVars.g_moveToSetPosFlag THEN
	m_targetDHJntPos[1] := GVL_InstruTestUIVars.g_targetRollAng*g_deg2rad;
	m_targetDHJntPos[2] := GVL_InstruTestUIVars.g_targetPitchAng*g_deg2rad;
	m_targetDHJntPos[3] := GVL_InstruTestUIVars.g_targetYawAng*g_deg2rad;
	m_targetGripAng := GVL_InstruTestUIVars.g_targetGripAng*g_deg2rad;
	m_targetGripForceLevel := LIMIT(0, GVL_InstruTestUIVars.g_targetGripForceLevel, 100);
ELSIF GVL_InstruTestUIVars.g_gripperOpenFlag THEN
	m_targetGripAng := i_slaveArm.instrument.kinematicParameters.m_maxGripAngle;
	m_targetGripForceLevel :=0;
ELSIF GVL_InstruTestUIVars.g_gripperCloseFlag THEN
	m_targetGripAng := 0;
	m_targetGripForceLevel :=0;
ELSIF GVL_InstruTestUIVars.g_maxGripForceFlag THEN
	m_targetGripAng := 0;
	m_targetGripForceLevel :=100;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="stayStill" Id="{d0e64cf1-810c-48a9-bb08-c3a957da86ae}">
      <Declaration><![CDATA[METHOD stayStill : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:int;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF m_lastInstruTestMode>=1 AND m_lastInstruTestMode <5 THEN
	m_cmdJntPos := i_slaveArm.curJntPos;
END_IF
m_cmdJntVel := g_zeroVec8d;
m_lastCmdJntPos := m_cmdJntPos;
m_cmdDHJntPos :=i_slaveArm.curDHJntPos;
m_cmdDHJntVel :=g_zeroVec6d;
m_targetGripAng := i_slaveArm.curGripAngle;
m_targetGripForceLevel := 0;

FOR i:=1 TO 3  DO
	m_DHJntOTG[i].init(m_cmdDHJntPos[i+3], 0, m_maxJntVel[i], m_maxJntAcc[i], g_slaveArmCtrlCycleTime);
END_FOR

m_gripAngleOTG.init(m_targetGripAng, 0, 2*m_maxJntVel[3], 2*m_maxJntAcc[3], g_slaveArmCtrlCycleTime);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlInstruTest">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.calcCmdJntPos">
      <LineId Id="279" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="327" Count="10" />
      <LineId Id="414" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="391" Count="3" />
      <LineId Id="261" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="341" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.calcCmdJntTrq">
      <LineId Id="121" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="195" Count="4" />
      <LineId Id="141" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="142" Count="2" />
      <LineId Id="177" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.determinTestMode">
      <LineId Id="32" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="29" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.fingerGripMoveTest">
      <LineId Id="9" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.fingerOpenCloseTest">
      <LineId Id="5" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="40" Count="6" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.fingerOpenMoveTest">
      <LineId Id="9" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="37" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.init">
      <LineId Id="13" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="86" Count="6" />
      <LineId Id="19" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.instruVerifyTest">
      <LineId Id="49" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="33" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="36" Count="6" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="44" Count="1" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.manualTest">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="5" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruTest.stayStill">
      <LineId Id="5" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
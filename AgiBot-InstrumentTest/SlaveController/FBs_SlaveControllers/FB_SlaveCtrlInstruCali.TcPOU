<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlInstruCali" Id="{f6122a4e-e5d8-4252-8b12-6598a16e0174}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Calibrate the zero position of Instrument
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlInstruCali EXTENDS FB_SlaveArmCtrlBase
VAR
	// flag to start calibration
	m_instruCaliStart:BOOL;
	
	// mount motion planning
	m_jntOTG :ARRAY[1..8] OF FB_secOrdTrajFilter;
	m_instruMountVel :LREAL := 1*PI;
	m_instruMountAcc :LREAL := 2*PI;

	// 	cali status
	m_rollJntCaliStatus :INT := 0;
	m_pitchJntCaliStatus :INT := 0;
	m_yawJntCaliStatus :INT := 0;
	
	// flag if zero position is written to CoE
	m_zeroPosWritten :BOOL;
	m_zeroPosWriteStart :BOOL;
	
	// flag if SN is written to CoE
	m_SNWritten:BOOL;
	m_SNWriteStart:BOOL;
	
	// joint current threshold which indicate panel is buckled with instrument
	m_maxJntCurrent :LREAL := 300;
	
	// joint current threshold which indicate finger closed
	m_fingerCloseCurrent :LREAL := 50;
	
	// joint position at limits
	m_jntLimitPos1, m_jntLimitPos2, m_jntCaliPos :LREAL;
	m_jntLimitPos3, m_jntLimitPos4 :LREAL;

	// flag if joint is mounted
	m_jointMounted :ARRAY[1..8] OF BOOL := [5(FALSE)];
	
	// instrument mount motion range
	m_mountMotionAng :LREAL :=30*g_deg2Rad;
	
	// command mount motion
	m_targetMountPos :Vec8d;
	
	// instrument zero position
	m_instruZeroPosition :Vec5d;
	
	// angle to close finger
	m_baseCloseAngle :LREAL := 1*g_deg2Rad;
	m_bipolarCloseAngle :LREAL := 5*g_deg2Rad;
	m_proGraspCloseAngle:LREAL := 25*g_deg2Rad;
	
	//new endoscope calibration
	m_scopeMountStatus :INT := 0;
	// instrument zero position
	m_instruZeroDeviation :Vec5d;
	m_maxJntCurrentEndoscope :Vec5d := [120, 120, 120, 120, 120];
	newEndoscopeCaliCompelet: BOOL:=FALSE;
	
	
	m_gripAngleOTG : FB_secOrdTrajFilter;
	m_targetGripAng:LREAL;
	m_cmdGripAng:LREAL;
	m_cmdDHJntPos :Vec6d;
	m_initTrig:R_TRIG;
	m_cmdJntPosMid:Vec8d;
	
	A:LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{92420bbe-f9a2-4f31-a213-0e60613d7858}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// retur directly if instrument/endoscope is not readed
IF NOT i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN
	m_rollJntCaliStatus :=0;
	m_pitchJntCaliStatus :=0;
	m_yawJntCaliStatus :=0;
	m_scopeMountStatus:=0;
	m_zeroPosWritten :=FALSE;
	m_zeroPosWriteStart:=FALSE;
	m_SNWritten :=FALSE;
	m_SNWriteStart:=FALSE;
	m_instruCaliStart:=FALSE;
	m_jntOPMode[6] := DriverOPMode_PosTrq;
	m_jntOPMode[7] := DriverOPMode_PosTrq;
	FOR i:=4 TO 8 DO
		m_jointMounted[i]:=FALSE;
	END_FOR
	return;
END_IF
m_initTrig(CLK:=m_yawJntCaliStatus = -1);
IF m_initTrig.Q THEN
	m_targetGripAng := i_slaveArm.curGripAngle;
	m_gripAngleOTG.init(m_targetGripAng, 0, 2*m_instruMountVel, 10*m_instruMountAcc, g_slaveArmCtrlCycleTime);
END_IF
IF m_yawJntCaliStatus = -1 THEN
	jog(i_slaveArm);
END_IF
// write zero position to CoE
IF GVL_InstruTestUIVars.g_writeZeroPosFlag THEN
	GVL_InstruTestUIVars.g_writeZeroPosFlagErr:=0;
	IF ABS(i_slaveArm.filtJntCurrent[4])<150 AND ABS(i_slaveArm.filtJntCurrent[5])<150 THEN
		m_zeroPosWriteStart := TRUE;
	ELSE
		GVL_InstruTestUIVars.g_writeZeroPosFlagErr:=1;
	END_IF
ELSE
	IF (m_yawJntCaliStatus = -1 OR m_scopeMountStatus = -1) AND m_zeroPosWriteStart THEN
		IF NOT m_zeroPosWritten THEN
			IF InstruType_NewEndoscope = i_slaveArm.instrument.onChipData.m_InstruID THEN
				FOR  i:=1 TO  5 DO
					m_instruZeroPosition[i]:=i_slaveArm.linkSingle[i+3];
				END_FOR
				m_zeroPosWritten := i_slaveArm.instrument.writeZeroPosToChip(m_instruZeroPosition[4],0.0,0.0);
			ELSE
				m_zeroPosWritten := i_slaveArm.instrument.writeZeroPosToChip(m_instruZeroPosition[1],m_instruZeroPosition[2],m_instruZeroPosition[3]);
			END_IF
				
		ELSE
			m_zeroPosWriteStart:=FALSE;
			m_zeroPosWritten:=FALSE;
		END_IF
		RETURN;
	END_IF;
END_IF


// move joint to zero position
IF GVL_InstruTestUIVars.g_searchZeroPosFlag THEN
	m_rollJntCaliStatus :=0;
	m_pitchJntCaliStatus :=0;
	m_yawJntCaliStatus :=0;
	m_instruCaliStart := TRUE;
ELSE
	IF m_instruCaliStart THEN
		// calibrate motion
		IF InstruType_NewEndoscope = i_slaveArm.instrument.onChipData.m_InstruID THEN
			newEndoscopeCali(i_slaveArm);
			IF m_scopeMountStatus = -1 THEN
				m_jntOPMode[6] := DriverOPMode_Trq;
				m_jntOPMode[7] := DriverOPMode_Trq;
				GVL_InstruTestUIVars.g_instruCaliState:=TRUE;
				m_instruZeroPosition[1]:=0;
				m_instruZeroPosition[2]:=0;
				m_instruZeroPosition[3]:=0;
				m_instruZeroPosition[4]:=i_slaveArm.linkSingle[7];
				m_instruZeroPosition[5]:=0;
				GVL_InstruTestUIVars.writeInstruZeroPos:=m_instruZeroPosition;
				m_instruCaliStart:=FALSE;
			END_IF
			
		ELSE
			IF m_rollJntCaliStatus <> -1 THEN
				rollJntCali(i_slaveArm);
			ELSIF m_pitchJntCaliStatus <> -1 THEN
				pitchJntCali(i_slaveArm);
			ELSIF m_yawJntCaliStatus <> -1 THEN
				IF  i_slaveArm.instrument.instruTypeInfo.m_isSingleFinger THEN
					yawJntCali_finger(i_slaveArm);
				ELSE
					yawJntCali_gripper(i_slaveArm);
				END_IF
			
			END_IF
			
			// calibrate motion finish and record position
			IF m_yawJntCaliStatus = -1 THEN
				FOR  i:=1 TO  5 DO
					m_instruZeroPosition[i]:=i_slaveArm.linkSingle[i+3];
				END_FOR
				GVL_InstruTestUIVars.g_instruCaliState:=TRUE;
				GVL_InstruTestUIVars.writeInstruZeroPos:=m_instruZeroPosition;
				m_instruCaliStart:=FALSE;
			END_IF
		END_IF
		
	END_IF
		
END_IF

IF m_yawJntCaliStatus = -1 THEN
	FOR  i:=1 TO  5 DO
		m_instruZeroPosition[i]:=i_slaveArm.linkSingle[i+3];
	END_FOR
	GVL_InstruTestUIVars.writeInstruZeroPos:=m_instruZeroPosition;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="getState" Id="{e3d04e4e-5508-42eb-b7a7-ea2cca5984ad}">
      <Declaration><![CDATA[PROPERTY getState : BOOL]]></Declaration>
      <Get Name="Get" Id="{4a23aa80-0843-40ae-b688-516ee57df169}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[getState:=m_instruCaliStart;(*(m_yawJntCaliStatus <> -1 AND m_scopeMountStatus <> -1)AND 
		  (m_rollJntCaliStatus<>0 OR m_pitchJntCaliStatus<>0 OR m_yawJntCaliStatus<>0 OR m_scopeMountStatus<>0);*)]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="init" Id="{d75d663d-308e-4f56-ae72-9d04b2f0e2be}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_jntOPMode[4] := DriverOPMode_PosTrq;
m_jntOPMode[5] := DriverOPMode_PosTrq;
m_jntOPMode[6] := DriverOPMode_PosTrq;
m_jntOPMode[7] := DriverOPMode_PosTrq;
m_jntOPMode[8] := DriverOPMode_PosTrq;
FOR i:=1 TO 8 DO
	m_targetMountPos[i]:=m_cmdJntPos[i];
	m_jntOTG[i].init(m_targetMountPos[i], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
	m_jointMounted[i]:=FALSE;
END_FOR

m_rollJntCaliStatus :=0;
m_pitchJntCaliStatus :=0;
m_yawJntCaliStatus :=0;
m_zeroPosWritten := FALSE;
GVL_InstruTestUIVars.g_writeZeroPosFlagErr:=0;

m_zeroPosWriteStart:=FALSE;
m_SNWritten :=FALSE;
m_SNWriteStart:=FALSE;
m_instruCaliStart:=FALSE;
newEndoscopeCaliCompelet:=FALSE;
m_scopeMountStatus:=0;
// update commands to arm
copyCmds(r_slaveArmCtrlCmd);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="jog" Id="{1a63f64a-5e2d-4d23-bf61-2f3e6dc63987}">
      <Declaration><![CDATA[METHOD jog : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GVL_InstruTestUIVars.g_jogClose THEN
//	m_targetGripAng:=i_slaveArm.curGripAngle-1*g_deg2Rad;
	GVL_InstruTestUIVars.g_jogClose:=0;
	IF InstruType_ProGraspForceps = i_slaveArm.instrument.onChipData.m_InstruID THEN
		m_cmdJntPos[4]:=m_cmdJntPos[4]+ASIN((2.8/5.26) * SIN(1*i_slaveArm.instrument.instruTypeInfo.m_k1*g_deg2Rad));
		m_cmdJntPos[5]:=m_cmdJntPos[5]+ASIN((2.8/5.26) * SIN(1*i_slaveArm.instrument.instruTypeInfo.m_k1*g_deg2Rad));
	ELSE
		m_cmdJntPos[4]:=m_cmdJntPos[4]+1*g_deg2rad*i_slaveArm.instrument.instruTypeInfo.m_k1;
		m_cmdJntPos[5]:=m_cmdJntPos[5]+1*g_deg2rad*i_slaveArm.instrument.instruTypeInfo.m_k1;
	END_IF
END_IF

RETURN;

m_cmdDHJntPos:=i_slaveArm.curDHJntPos;
jog:=ABS(m_targetGripAng-m_cmdGripAng)<g_jntCtrlAngTolLow;
// traj plan
m_gripAngleOTG.run(m_targetGripAng,0.0, o_cmdAcc=>,o_cmdVel=>,o_cmdPos=>m_cmdGripAng);

// calculate target motor joint position from DH joint position
i_slaveArm.instrument.instruIK(m_cmdDHJntPos,m_cmdGripAng, o_jntPos=>m_cmdJntPosMid);
m_cmdJntPos[4]:=m_cmdJntPosMid[4];
m_cmdJntPos[5]:=m_cmdJntPosMid[5];]]></ST>
      </Implementation>
    </Method>
    <Method Name="newEndoscopeCali" Id="{1f31d0e3-23cc-4f60-a6a6-721c73b8ec3e}">
      <Declaration><![CDATA[METHOD newEndoscopeCali : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

CASE m_scopeMountStatus OF
	//fix scope lock joint(joint 7)
	0:
		// other joints stay still
		FOR i:=1 TO 5 DO
			IF i = 1 OR i =2 OR i =5 THEN
				m_jointMounted[i] := TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
		END_FOR
	
		// check if buckled
		m_jointMounted[3]:=FALSE; 
		m_jointMounted[4]:=FALSE; 
		FOR i:=3 TO 4 DO
			IF ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrentEndoscope[i] THEN 
				m_jointMounted[i]:=TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
				
			ELSE
				m_targetMountPos[i+3]:=curJntPos[i+3]+m_mountMotionAng;
			END_IF
		END_FOR
		
		IF m_jointMounted[3] AND m_jointMounted[4] THEN
			m_scopeMountStatus:=1;
		END_IF
		

	1: // buckle scope rotate joint (joint 8)
		m_jntOPMode[6] := DriverOPMode_Trq;
		m_instruZeroDeviation[4] :=  i_slaveArm.linkSingle[7] - 5.25;
		m_scopeMountStatus :=2;

	2:// move back to zero position
		
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] > pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] < -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
		
		m_targetMountPos[7]:=curJntPos[7] - m_instruZeroDeviation[4];
		m_scopeMountStatus :=3;
		
		
	3:
		newEndoscopeCali := FALSE;
		IF ABS(m_targetMountPos[7]-curJntPos[7]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh THEN
			// record current joint position as offset for instrument
			i_slaveArm.instrument.initInstruJntPos(i_slaveArm.curJntPos);
			newEndoscopeCali := TRUE;
			m_scopeMountStatus:=-1;
		END_IF
		
END_CASE

// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="pitchJntCali" Id="{e9c6d1cd-4c78-4bd5-b668-b8facd8b1f86}">
      <Declaration><![CDATA[METHOD pitchJntCali : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
	jntIdx :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[jntIdx:=6;
curJntPos := i_slaveArm.curJntPos;

CASE m_pitchJntCaliStatus OF
	// rotate clockwise
	0:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]+m_mountMotionAng;
	
		//buckle joint
		IF i_slaveArm.filtJntCurrent[jntIdx]> m_maxJntCurrent THEN 
			m_jntLimitPos1 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_pitchJntCaliStatus := 1;
		END_IF
		
	// rotate anticlockwise
	1:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]-m_mountMotionAng;
	
		//buckle  joint
		IF i_slaveArm.filtJntCurrent[jntIdx]<- m_maxJntCurrent THEN 
			m_jntLimitPos2 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_pitchJntCaliStatus := 2;
		END_IF
	
	2:// calculate center/calibarted position
		m_targetMountPos[jntIdx] :=  (m_jntLimitPos1 + m_jntLimitPos2)/2+ i_slaveArm.instrument.instruTypeInfo.m_instruPitchBachlash/2.0;
		m_pitchJntCaliStatus := 3;

	3:
		IF ABS(m_targetMountPos[jntIdx]-curJntPos[jntIdx]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh  THEN
			m_pitchJntCaliStatus := -1;
		END_IF
		
END_CASE

// traj plan
m_jntOTG[jntIdx].run(m_targetMountPos[jntIdx],0.0, o_cmdAcc=>m_cmdJntAcc[jntIdx],o_cmdVel=>m_cmdJntVel[jntIdx],o_cmdPos=>m_cmdJntPos[jntIdx]);]]></ST>
      </Implementation>
    </Method>
    <Method Name="rollJntCali" Id="{6fecbb26-dee3-460d-8ebc-c5e9758738f5}">
      <Declaration><![CDATA[METHOD rollJntCali : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
	jntIdx :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[jntIdx:=7;
curJntPos := i_slaveArm.curJntPos;

CASE m_rollJntCaliStatus OF
	// rotate clockwise
	0:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]+m_mountMotionAng;
	
		//buckle  joint
		IF i_slaveArm.filtJntCurrent[jntIdx]> m_maxJntCurrent AND ABS(i_slaveArm.curJntVel[jntIdx]) < 1*g_deg2rad  THEN 
			m_jntLimitPos1 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_rollJntCaliStatus := 1;
		END_IF
		
	// rotate anticlockwise
	1:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]-m_mountMotionAng;
	
		//buckle  joint
		IF i_slaveArm.filtJntCurrent[jntIdx]<- m_maxJntCurrent AND ABS(i_slaveArm.curJntVel[jntIdx]) < 1*g_deg2rad   THEN 
			m_jntLimitPos2 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_rollJntCaliStatus := 2;
		END_IF
	
	2:// calculate center/calibarted positio
		m_targetMountPos[jntIdx] :=  (m_jntLimitPos1 + m_jntLimitPos2)/2;
		m_rollJntCaliStatus := 3;

	3:
		IF ABS(m_targetMountPos[jntIdx]-curJntPos[jntIdx]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh  THEN
			m_rollJntCaliStatus := -1;
		END_IF
		
END_CASE

// traj plan
m_jntOTG[jntIdx].run(m_targetMountPos[jntIdx],0.0, o_cmdAcc=>m_cmdJntAcc[jntIdx],o_cmdVel=>m_cmdJntVel[jntIdx],o_cmdPos=>m_cmdJntPos[jntIdx]);]]></ST>
      </Implementation>
    </Method>
    <Method Name="yawJntCali_finger" Id="{367337ae-1143-4558-b119-2ddaf442a22f}">
      <Declaration><![CDATA[METHOD yawJntCali_finger : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
	jntIdx :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[jntIdx:=5;
curJntPos := i_slaveArm.curJntPos;

CASE m_yawJntCaliStatus OF
	// rotate clockwise
	0:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]+m_mountMotionAng;
	
		//buckle  joint
		IF i_slaveArm.filtJntCurrent[jntIdx]> m_maxJntCurrent THEN 
			m_jntLimitPos1 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_yawJntCaliStatus := 1;
		END_IF
		
	// rotate anticlockwise
	1:
		m_targetMountPos[jntIdx]:=curJntPos[jntIdx]-m_mountMotionAng;
	
		//buckle  joint
		IF i_slaveArm.filtJntCurrent[jntIdx]<- m_maxJntCurrent THEN 
			m_jntLimitPos2 := curJntPos[jntIdx];
			m_targetMountPos[jntIdx]:=curJntPos[jntIdx];
			m_jntOTG[jntIdx].init(m_targetMountPos[jntIdx], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_yawJntCaliStatus := 2;
		END_IF
	
	2:// calculate center/calibarted positio
		m_targetMountPos[jntIdx] :=  (m_jntLimitPos1 + m_jntLimitPos2)/2+i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash/2.0;;
		m_yawJntCaliStatus := 3;

	3:
		IF ABS(m_targetMountPos[jntIdx]-curJntPos[jntIdx]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := -1;
		END_IF
		
END_CASE

// traj plan
m_jntOTG[jntIdx].run(m_targetMountPos[jntIdx],0.0, o_cmdAcc=>m_cmdJntAcc[jntIdx],o_cmdVel=>m_cmdJntVel[jntIdx],o_cmdPos=>m_cmdJntPos[jntIdx]);]]></ST>
      </Implementation>
    </Method>
    <Method Name="yawJntCali_gripper" Id="{98a7face-4e61-461c-9585-b9ec777fc235}">
      <Declaration><![CDATA[METHOD yawJntCali_gripper : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	curJntPos :Vec8d;
	gripCloseAng:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

// determin finger close angle
IF i_slaveArm.instrument.instruType = InstruType_MarylandForceps OR i_slaveArm.instrument.instruType = InstruType_FenestratedForceps
	OR i_slaveArm.instrument.instruType = InstruType_CurvedBipolarDissector OR i_slaveArm.instrument.instruType = InstruType_MicroBipolarForceps THEN
	gripCloseAng := m_bipolarCloseAngle;
ELSIF i_slaveArm.instrument.instruType = InstruType_ProGraspForceps OR i_slaveArm.instrument.instruType = InstruType_ForceBipolar THEN
	gripCloseAng := m_proGraspCloseAngle;
ELSE
	gripCloseAng := m_baseCloseAngle;
END_IF

CASE m_yawJntCaliStatus OF
	// buckle joint4 and joint5 by moving toward limit
	0:
		//buckle panel with instrument
		// check if buckled 
		IF i_slaveArm.filtJntCurrent[4]<- m_maxJntCurrent THEN 
			m_jointMounted[4]:=TRUE;
			m_targetMountPos[4]:=curJntPos[4];
			m_jntOTG[4].init(m_targetMountPos[4], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_IF
		IF i_slaveArm.filtJntCurrent[5]<- m_maxJntCurrent THEN 
			m_jointMounted[5]:=TRUE;
			m_targetMountPos[5]:=curJntPos[5];
			m_jntOTG[5].init(m_targetMountPos[5], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_IF
		
		// set target joint position
		IF FALSE = m_jointMounted[4] THEN
			m_targetMountPos[4]:=curJntPos[4]-m_mountMotionAng;
		END_IF
		IF FALSE = m_jointMounted[5] THEN
			m_targetMountPos[5]:=curJntPos[5]-m_mountMotionAng;
		END_IF

		IF m_jointMounted[4] AND m_jointMounted[5] THEN
			m_yawJntCaliStatus := 1;
			m_jointMounted[4]:=FALSE;
			m_jointMounted[5]:=FALSE;
		END_IF
	// close finger
	1:
		//buckle panel with instrument
		// check if buckled 
		IF i_slaveArm.filtJntCurrent[4]> m_maxJntCurrent THEN 
			m_jointMounted[4]:=TRUE;
			m_targetMountPos[4]:=curJntPos[4];
			m_jntOTG[4].init(m_targetMountPos[4], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_IF
		IF i_slaveArm.filtJntCurrent[5]> m_maxJntCurrent THEN 
			m_jointMounted[5]:=TRUE;
			m_targetMountPos[5]:=curJntPos[5];
			m_jntOTG[5].init(m_targetMountPos[5], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_IF
		
		// set target joint position
		IF FALSE = m_jointMounted[4] THEN
			m_targetMountPos[4]:=curJntPos[4]+m_mountMotionAng;
		END_IF
		IF FALSE = m_jointMounted[5] THEN
			m_targetMountPos[5]:=curJntPos[5]+m_mountMotionAng;
		END_IF

		IF m_jointMounted[4] AND m_jointMounted[5] THEN
			m_yawJntCaliStatus := 2;
			m_jointMounted[4]:=FALSE;
			m_jointMounted[5]:=FALSE;
		END_IF
		
	2:// move joint5 to open gripper
		m_targetMountPos[4] := curJntPos[4]-i_slaveArm.instrument.instruTypeInfo.m_maxGripAngle/4.0;
		m_targetMountPos[5] := curJntPos[5]-i_slaveArm.instrument.instruTypeInfo.m_maxGripAngle/4.0;
		m_yawJntCaliStatus := 3;

	3:
		IF ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := 4;
		END_IF
			
	// roll clockwise to reach limit
	4:
		IF NOT(m_jointMounted[4]) THEN  
			// set target joint position
			m_targetMountPos[4]:=curJntPos[4]-m_mountMotionAng;
			// check if reach limit 
			IF i_slaveArm.filtJntCurrent[4]< -m_maxJntCurrent THEN 
				m_jointMounted[4]:=TRUE;
				m_jntLimitPos1 := curJntPos[4];
				m_targetMountPos[4]:=curJntPos[4];
				m_jntOTG[4].init(m_targetMountPos[4], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
		END_IF
		IF NOT(m_jointMounted[5]) THEN 
			// set target joint position
			m_targetMountPos[5]:=curJntPos[5]+m_mountMotionAng;
			// check if reach limit 
			IF i_slaveArm.filtJntCurrent[5]> m_maxJntCurrent THEN 
				m_jointMounted[5]:=TRUE;
				m_jntLimitPos2 := curJntPos[5];
				m_targetMountPos[5]:=curJntPos[5];
				m_jntOTG[5].init(m_targetMountPos[5], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF	
		END_IF
		
		// transit
		IF m_jointMounted[4] AND m_jointMounted[5] THEN
			m_yawJntCaliStatus := 5;
			m_jointMounted[4]:=FALSE;
			m_jointMounted[5]:= FALSE;
		END_IF
		
	5:// move joint5 to open gripper
		m_targetMountPos[5] := curJntPos[5]-i_slaveArm.instrument.instruTypeInfo.m_maxGripAngle/2.0;
		m_yawJntCaliStatus := 6;

	6:
		IF ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := 7;
		END_IF

	// roll anticlockwise to reach limit
	7:
		IF NOT(m_jointMounted[4]) THEN  
			// set target joint position
			m_targetMountPos[4]:=curJntPos[4]+m_mountMotionAng;
			// check if reach limit 
			IF i_slaveArm.filtJntCurrent[4]>m_maxJntCurrent THEN 
				m_jointMounted[4]:=TRUE;
				m_jntLimitPos3 := curJntPos[4];
				m_targetMountPos[4]:=curJntPos[4];
				m_jntOTG[4].init(m_targetMountPos[4], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
		END_IF
		IF NOT(m_jointMounted[5]) THEN 
			// set target joint position
			m_targetMountPos[5]:=curJntPos[5]-m_mountMotionAng;
			// check if reach limit 
			IF i_slaveArm.filtJntCurrent[5]<- m_maxJntCurrent THEN 
				m_jointMounted[5]:=TRUE;
				m_jntLimitPos4 := curJntPos[5];
				m_targetMountPos[5]:=curJntPos[5];
				m_jntOTG[5].init(m_targetMountPos[5], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF	
		END_IF
		
		// transit
		IF m_jointMounted[4] AND m_jointMounted[5] THEN
			m_yawJntCaliStatus := 8;
			m_jointMounted[4]:=FALSE;
			m_jointMounted[5]:= FALSE;
		END_IF
		
	8:// calculate center/calibarted position
		m_targetMountPos[4] := (m_jntLimitPos1 + m_jntLimitPos3)/2-i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash/2.0;
		m_targetMountPos[5] := (m_jntLimitPos2 + m_jntLimitPos4)/2+i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash/2.0;
		m_yawJntCaliStatus := 9;

	9:
		IF ABS(m_targetMountPos[4]-curJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_targetMountPos[4] := curJntPos[4]+i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash;
			m_yawJntCaliStatus := 19;
		END_IF
	19:
		IF ABS(m_targetMountPos[4]-curJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := 20;
		END_IF
	20: 
		m_targetMountPos[4] := curJntPos[4]+22.50*g_deg2Rad;
		m_targetMountPos[5] := curJntPos[5]+22.50*g_deg2Rad;
		IF ABS(m_targetMountPos[4]-m_cmdJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-m_cmdJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_targetMountPos[4]:=curJntPos[4];
			m_targetMountPos[5]:=curJntPos[5];
			m_jntOTG[1].init(m_targetMountPos[4], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_jntOTG[2].init(m_targetMountPos[5], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		m_yawJntCaliStatus := 21;
 		END_IF
	21:
		m_targetMountPos[4] := curJntPos[4]-0.35*i_slaveArm.instrument.instruTypeInfo.m_maxGripAngle-i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash-25*g_deg2Rad;
		m_targetMountPos[5] := curJntPos[5]-0.35*i_slaveArm.instrument.instruTypeInfo.m_maxGripAngle-i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash-25*g_deg2Rad;
		m_yawJntCaliStatus := 22;
    22:
		IF ABS(m_targetMountPos[4]-m_cmdJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-m_cmdJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
		m_yawJntCaliStatus := 23;
 		END_IF
	23:// calculate center/calibarted position
		m_targetMountPos[4] := (m_jntLimitPos1 + m_jntLimitPos3)/2-i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash/2.0;
		m_targetMountPos[5] := (m_jntLimitPos2 + m_jntLimitPos4)/2+i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash/2.0;
		m_yawJntCaliStatus := 24;

	24:
		IF ABS(m_targetMountPos[4]-curJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_targetMountPos[4] := curJntPos[4]+i_slaveArm.instrument.instruTypeInfo.m_instruYawBacklash;
			m_yawJntCaliStatus := 25;
		END_IF
	25:
		IF ABS(m_targetMountPos[4]-curJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := 10;
		END_IF
		
	// close finger	
	10:
			m_targetMountPos[4] := curJntPos[4]+gripCloseAng;
			m_targetMountPos[5] := curJntPos[5]+gripCloseAng;
			m_yawJntCaliStatus := 11;
	11:
		IF ABS(m_targetMountPos[4]-curJntPos[4]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  AND
			ABS(m_targetMountPos[5]-curJntPos[5]) <GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
			m_yawJntCaliStatus := -1;
		END_IF

END_CASE

// traj plan
m_jntOTG[4].run(m_targetMountPos[4],0.0, o_cmdAcc=>m_cmdJntAcc[4],o_cmdVel=>m_cmdJntVel[4],o_cmdPos=>m_cmdJntPos[4]);
m_jntOTG[5].run(m_targetMountPos[5],0.0, o_cmdAcc=>m_cmdJntAcc[5],o_cmdVel=>m_cmdJntVel[5],o_cmdPos=>m_cmdJntPos[5]);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlInstruCali">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.calcCmdJntPos">
      <LineId Id="721" Count="4" />
      <LineId Id="886" Count="0" />
      <LineId Id="726" Count="4" />
      <LineId Id="887" Count="1" />
      <LineId Id="731" Count="4" />
      <LineId Id="919" Count="1" />
      <LineId Id="924" Count="0" />
      <LineId Id="921" Count="1" />
      <LineId Id="736" Count="0" />
      <LineId Id="749" Count="3" />
      <LineId Id="946" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="753" Count="0" />
      <LineId Id="944" Count="1" />
      <LineId Id="943" Count="0" />
      <LineId Id="754" Count="2" />
      <LineId Id="865" Count="0" />
      <LineId Id="890" Count="1" />
      <LineId Id="889" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="868" Count="1" />
      <LineId Id="867" Count="0" />
      <LineId Id="757" Count="18" />
      <LineId Id="839" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="884" Count="1" />
      <LineId Id="881" Count="0" />
      <LineId Id="904" Count="2" />
      <LineId Id="903" Count="0" />
      <LineId Id="907" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="876" Count="1" />
      <LineId Id="870" Count="0" />
      <LineId Id="842" Count="0" />
      <LineId Id="844" Count="20" />
      <LineId Id="843" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="795" Count="3" />
      <LineId Id="800" Count="0" />
      <LineId Id="925" Count="3" />
      <LineId Id="930" Count="0" />
      <LineId Id="801" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.getState.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.init">
      <LineId Id="174" Count="8" />
      <LineId Id="265" Count="3" />
      <LineId Id="188" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="233" Count="2" />
      <LineId Id="231" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="193" Count="2" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.jog">
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.newEndoscopeCali">
      <LineId Id="3" Count="55" />
      <LineId Id="60" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="61" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.pitchJntCali">
      <LineId Id="284" Count="39" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.rollJntCali">
      <LineId Id="240" Count="39" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.yawJntCali_finger">
      <LineId Id="240" Count="39" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruCali.yawJntCali_gripper">
      <LineId Id="926" Count="157" />
      <LineId Id="1159" Count="9" />
      <LineId Id="1158" Count="0" />
      <LineId Id="1153" Count="0" />
      <LineId Id="1122" Count="1" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1156" Count="0" />
      <LineId Id="1188" Count="1" />
      <LineId Id="1186" Count="1" />
      <LineId Id="1131" Count="0" />
      <LineId Id="1125" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1150" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1151" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1171" Count="14" />
      <LineId Id="1169" Count="1" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1094" Count="3" />
      <LineId Id="1101" Count="10" />
    </LineIds>
  </POU>
</TcPlcObject>
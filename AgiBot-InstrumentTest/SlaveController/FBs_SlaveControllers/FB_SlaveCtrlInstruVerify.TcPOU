<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SlaveCtrlInstruVerify" Id="{5c36b560-315f-4c2f-ac62-83b50e620b94}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm test
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlInstruVerify EXTENDS FB_SlaveArmCtrlBase
VAR CONSTANT
	m_instruVerifyTrajNum :INT :=8;
END_VAR
VAR
	// rising edge generator for instrument information reading
	m_nextStepRTrig:R_TRIG;
	m_lastStepRTrig:R_TRIG;
											
	// variable for instument veify
	m_verifyTestStep :INT :=0;
	m_reachVerifyPos : BOOL := FALSE;
	// instrument move motion via points[roll, pitch, yaw]
	m_instruVerifyPos:ARRAY [1..m_instruVerifyTrajNum, 1..4] OF LREAL:= 
	[0,  -pi/2 ,	0,	0,
	 pi,  -pi/2 ,	0,	0,
	 0,  -pi/2 ,	0,	0,
	 0,  -pi/2 ,	0,	pi/4,
	 0,  -pi/2 ,	0,	0,
	 0,  -pi/2 ,	0,	-10*g_deg2rad,
	 0,  -pi/2 ,	0,	0,
	 0,  -pi/2 ,	0,	0];
				

	// final target DH joint position and grip angle
	m_targetDHJntPos:Vec3d;
	m_targetGripAng:LREAL;
	m_targetGripForceLevel :LREAL :=0;
	
	// interploated command joint position and grip angle 
	m_cmdDHJntPos :Vec6d;
	m_cmdDHJntVel :Vec6d;
	m_cmdGripAng:LREAL;

	// last joint position 
	m_lastCmdJntPos :Vec8d ;
	
	// instrument controller
	m_instruController : FB_BasicInstruControl;
	m_usKnifeController : FB_UltrosonicKnifeControl;
	m_instruCmdJntPos,m_instruCmdJntVel : Vec5d;
	m_instruCmdJntTrq :Vec5d;
	
	// OTG
	m_DHJntOTG:ARRAY[1..3] OF FB_secOrdTrajFilter;
	m_gripAngleOTG : FB_secOrdTrajFilter;
	m_maxJntVel:Vec3d:=[3(2.0)];
	m_maxJntAcc:Vec3d:=[3(4.0)];

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{c02f0a89-3ec2-429c-b384-248b1b579211}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// determine final target DH joint position
instruVerifyTest(i_slaveArm);

// run OTG
FOR i:=1 TO 3  DO
	m_DHJntOTG[i].run(m_targetDHJntPos[i],0.0, o_cmdAcc=>,o_cmdVel=>m_cmdDHJntVel[i],o_cmdPos=> m_cmdDHJntPos[i+3]);
END_FOR
m_gripAngleOTG.run(m_targetGripAng,0.0, o_cmdAcc=>,o_cmdVel=>,o_cmdPos=>m_cmdGripAng);

// calculate target motor joint position from DH joint position
i_slaveArm.instrument.instruIK(m_cmdDHJntPos,m_cmdGripAng, o_jntPos=>m_cmdJntPos);

// command velocity
vecSub(m_cmdJntPos, m_lastCmdJntPos, m_cmdJntVel);
vecSelfMultiNum(m_cmdJntVel, g_slaveArmCtrlFreq);
m_lastCmdJntPos:=m_cmdJntPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{6485d26a-363b-4146-94b3-4ce26cce455f}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	nullspaceMat :Mat7d;
	ctrlTrq : Vec7d;
	i : int ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

// instrument joint control
FOR i:=1 TO 5 DO 
	m_instruCmdJntPos[i]:=m_cmdJntPos[i+3];
	m_instruCmdJntVel[i]:=m_cmdJntVel[i+3];
END_FOR

IF i_slaveArm.instrument.instruType = InstruType_UltrasoundKnifeS OR i_slaveArm.instrument.instruType = InstruType_UltrasoundKnifeU THEN
	m_usKnifeController.run(m_instruCmdJntPos,m_instruCmdJntVel, m_targetGripForceLevel, i_slaveArm, o_cmdJntTrq=>m_instruCmdJntTrq);
ELSE
	m_instruController.run(m_instruCmdJntPos,m_instruCmdJntVel, m_cmdDHJntPos[6], m_cmdDHJntVel[6], m_targetGripForceLevel, i_slaveArm, o_cmdJntTrq=>m_instruCmdJntTrq);
END_IF

FOR i:=1 TO 5 DO
	m_cmdJntTrq[i+3]:=m_instruCmdJntTrq[i];
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{e6c7fc49-a7ee-46ed-8bbb-07e6638fd69f}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i:int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_lastCmdJntPos:=m_cmdJntPos;
m_jntOPMode[1] := DriverOPMode_PosTrq;
m_jntOPMode[2] := DriverOPMode_PosTrq;
m_jntOPMode[3] := DriverOPMode_PosTrq;
m_jntOPMode[4] := DriverOPMode_Trq;
m_jntOPMode[5] := DriverOPMode_Trq;
m_jntOPMode[6] := DriverOPMode_Trq;
m_jntOPMode[7] := DriverOPMode_Trq;
m_jntOPMode[8] := DriverOPMode_Trq;

m_verifyTestStep := 0;
m_cmdDHJntPos :=i_slaveArm.curDHJntPos;
m_cmdDHJntVel :=g_zeroVec6d;
m_targetGripAng := i_slaveArm.curGripAngle;
m_targetDHJntPos[1] := i_slaveArm.curDHJntPos[4];
m_targetDHJntPos[2] := i_slaveArm.curDHJntPos[5];
m_targetDHJntPos[3] := i_slaveArm.curDHJntPos[6];

// init instrument controller
m_instruController.init(i_slaveArm);
m_usKnifeController.init(i_slaveArm);

FOR i:=1 TO 3  DO
	m_DHJntOTG[i].init(m_cmdDHJntPos[i+3], 0, m_maxJntVel[i], m_maxJntAcc[i], g_slaveArmCtrlCycleTime);
END_FOR

m_gripAngleOTG.init(m_targetGripAng, 0, 2*m_maxJntVel[3], 2*m_maxJntAcc[3], g_slaveArmCtrlCycleTime);
// update commands to arm
copyCmds(r_slaveArmCtrlCmd);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="instruVerifyTest" Id="{d16e87c5-3252-438b-9458-4acbad9aeb7e}">
      <Declaration><![CDATA[METHOD instruVerifyTest : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
	nextStepFlag :BOOL;
	lastStepFlag :BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_targetGripForceLevel :=0;
m_verifyTestStep := LIMIT(0,m_verifyTestStep, m_instruVerifyTrajNum-1);

FOR i:=1 TO 3 DO
	 m_targetDHJntPos[i] := m_instruVerifyPos[m_verifyTestStep+1, i];
END_FOR
 m_targetGripAng := LIMIT(0, m_instruVerifyPos[m_verifyTestStep+1,4], i_slaveArm.instrument.kinematicParameters.m_maxGripAngle);

m_nextStepRTrig(CLK:= GVL_InstruTestUIVars.g_instruVerifyNextStepFlag, Q=>nextStepFlag );
m_lastStepRTrig(CLK:= GVL_InstruTestUIVars.g_instruVerifyLastStepFlag, Q=>lastStepFlag );
IF  nextStepFlag THEN
	m_verifyTestStep :=m_verifyTestStep + 1;
ELSIF  lastStepFlag THEN
	m_verifyTestStep :=m_verifyTestStep - 1;
END_IF
 ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlInstruVerify">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruVerify.calcCmdJntPos">
      <LineId Id="324" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="391" Count="3" />
      <LineId Id="261" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="131" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruVerify.calcCmdJntTrq">
      <LineId Id="121" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="195" Count="4" />
      <LineId Id="141" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="142" Count="2" />
      <LineId Id="177" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruVerify.init">
      <LineId Id="13" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="86" Count="6" />
      <LineId Id="19" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInstruVerify.instruVerifyTest">
      <LineId Id="49" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="36" Count="4" />
      <LineId Id="74" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="44" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveRobot" Id="{8cbdb2ba-9735-46e3-8cbc-296330acc8cc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SlaveRobot
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// slave arms, responsible for arm kinematic and control
	m_slaveArms :ARRAY[1..g_sArmNum] OF FB_SlaveArm;
	
	// arm light control word
	m_lightCrlWord :ARRAY [1..4] OF UDINT;
	
	// arm state
	m_slaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[g_sArmNum(E_SlaveArmState.SlaveArmState_Error)];
	m_lastSlaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[g_sArmNum(E_SlaveArmState.SlaveArmState_Error)];
	m_nextSlaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[g_sArmNum(E_SlaveArmState.SlaveArmState_Error)];
	
	// flag if panel and instrument mounted
	m_panelMountedFlag :ARRAY[1..g_sArmNum] OF BOOL :=[g_sArmNum(FALSE)];
	m_instrumentMountedFlag :ARRAY[1..g_sArmNum] OF BOOL :=[g_sArmNum(FALSE)];
	
	// all arm controller instance 
	m_armCtrlFactory :ARRAY[1..g_sArmNum,1..SlaveArmState_totalNum] OF I_SlaveArmCtrl;
	m_armError :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlError;
	m_armInit :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInit;
	m_armSelfCheck :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlSelfCheck;
	m_armStandBy :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlStandBy;
	m_mountPanel :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMountPanel;
	m_panelReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlPanelReady;
	m_mountInstru :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMountInstru;
	m_instruReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruReady;
	m_armMasterSlave :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMasterSlave;
	m_scopeReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlScopeReady;
	m_armEndoscope :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlEndoscope;
	m_armAdjust :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlAdjust;
	m_armPackage :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlPackage;
	m_armCart :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlCart;
	m_armGraCali :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlGraCali;
	m_armTest :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlTest;
	m_instruRetract :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruRetract;
	m_instruInvasion :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruInvasion;
	m_armDisable :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlDisable;
	m_instruCali :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruCali;
	m_scopeToggle :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlScopeToggle;
	m_Performance :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlPerformance;
	m_armStop :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlStop;
	m_instruAutoTest :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruAutoTest;
	m_instruManualTest :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruManualTest;
	m_instruVerify :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruVerify;
	
	// arm controller interface
	m_armCtrl :ARRAY[1..g_sArmNum] OF I_SlaveArmCtrl;
	m_armCtrlCmds :ARRAY[1..g_sArmNum] OF ST_SlaveArmCtrlCmds;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="controllerTransit" Id="{8f288ee3-c1dd-4604-a493-d121fbcd6b66}">
      <Declaration><![CDATA[METHOD PROTECTED controllerTransit : BOOL
VAR_INPUT
END_VAR
VAR
	i:int;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO 
	// Controller transit
	IF m_nextSlaveArmState[i]<> m_slaveArmState[i] THEN
		// reset current controller
		m_armCtrl[i].reset();
		
		// transit to new controller
		m_lastSlaveArmState[i]:=m_slaveArmState[i];
		m_slaveArmState[i]:=m_nextSlaveArmState[i];
		m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
		
		// init next controller
		m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
		m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{610a17f3-34c5-4e3c-bbbc-19f9c2f46946}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// arm init
	m_slaveArms[i].Init(i);
	m_slaveArmState[i]:=SlaveArmState_Init;
	m_lastSlaveArmState[i]:=SlaveArmState_Init;
	m_nextSlaveArmState[i]:=SlaveArmState_Init;
	
	// command init
	m_armCtrlCmds[i].m_jntEnableFlag := g_zeroVec8i;
	m_armCtrlCmds[i].m_jntOPMode := g_slaveAllPosMode;
	m_armCtrlCmds[i].m_cmdCartPose := m_slaveArms[i].curCartPose;
	m_armCtrlCmds[i].m_cmdCartTwist := g_zeroVec6d;
	m_armCtrlCmds[i].m_cmdJntPos := m_slaveArms[i].curJntPos;
	m_armCtrlCmds[i].m_cmdJntVel := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntAcc := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntTrq := g_zeroVec8d;
	
	// generate controller factory
	m_armCtrlFactory[i,SlaveArmState_Error] := m_armError[i];
	m_armCtrlFactory[i,SlaveArmState_Init] := m_armInit[i];
	m_armCtrlFactory[i,SlaveArmState_SelfCheck] := m_armSelfCheck[i];
	m_armCtrlFactory[i,SlaveArmState_Standby] := m_armStandBy[i];
	m_armCtrlFactory[i,SlaveArmState_MountPanel] := m_mountPanel[i];
	m_armCtrlFactory[i,SlaveArmState_PanelReady] := m_panelReady[i];
	m_armCtrlFactory[i,SlaveArmState_MountInstru] := m_mountInstru[i];
	m_armCtrlFactory[i,SlaveArmState_InstruReady] := m_instruReady[i];
	m_armCtrlFactory[i,SlaveArmState_MasterSlave] := m_armMasterSlave[i];
	m_armCtrlFactory[i,SlaveArmState_ScopeReady] := m_scopeReady[i];
	m_armCtrlFactory[i,SlaveArmState_EndoScope] := m_armEndoscope[i];
	m_armCtrlFactory[i,SlaveArmState_Adjust] := m_armAdjust[i];
	m_armCtrlFactory[i,SlaveArmState_Package] := m_armPackage[i];
	m_armCtrlFactory[i,SlaveArmState_Cart] := m_armCart[i];
	m_armCtrlFactory[i,SlaveArmState_GravityCali] := m_armGraCali[i];
	m_armCtrlFactory[i,SlaveArmState_Test] := m_armTest[i];
	m_armCtrlFactory[i,SlaveArmState_InstruRetract] := m_instruRetract[i];
	m_armCtrlFactory[i,SlaveArmState_InstruInvasion] := m_instruInvasion[i];
	m_armCtrlFactory[i,SlaveArmState_Disable] := m_armDisable[i];
	m_armCtrlFactory[i,SlaveArmState_InstruCali] := m_instruCali[i];
	m_armCtrlFactory[i,SlaveArmState_ScopeToggle] := m_scopeToggle[i];
	m_armCtrlFactory[i,SlaveArmState_Performance] := m_Performance[i];
	m_armCtrlFactory[i,SlaveArmState_Stop] := m_armStop[i];
	m_armCtrlFactory[i,SlaveArmState_InstruAutoTest] := m_instruAutoTest[i];
	m_armCtrlFactory[i,SlaveArmState_InstruManualTest] := m_instruManualTest[i];
	m_armCtrlFactory[i,SlaveArmState_InstruVerify] := m_instruVerify[i];
	
	// assign controller
	m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
	m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{ed6f787a-4dc0-4602-b386-92a3c3880a23}">
      <Declaration><![CDATA[METHOD PUBLIC run : BOOL
VAR_IN_OUT CONSTANT
	i_slaveInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i:INT;
	nullScopePose :ST_Frame;
	nullSetupStatus:ST_SetupStatus;
	nullMasterStatus:ST_MasterStatus;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// update dynamic data
	m_slaveArms[i].updateDyna(i_slaveInputDataPool.m_slaveDynaData);
								
	// update slave arm kinematics
	m_slaveArms[i].updateStatus();
END_FOR

//update arm light
updateArmLight(i_slaveInputDataPool);

// state machine transition
stateMachine(i_slaveInputDataPool);

// controller transition
controllerTransit();

FOR i:=1 TO g_sArmNum DO
	// null ptr check
	ASSERT(0 <> m_armCtrl[i]);
	
	// run controller
	m_armCtrl[i].run(nullScopePose, nullMasterStatus, nullSetupStatus,m_SlaveArms[i],m_armCtrlCmds[i]);

	// update commands to drivers
	m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);

END_FOR


// ################# update insrument UI data #########################################
FOR i:=1 TO 5 DO 
	GVL_InstruTestUIVars.g_curInstruJntPos[i]:= m_slaveArms[1].curJntPos[i+3];
	GVL_InstruTestUIVars.g_curInstruJntCurrent[i]:= m_slaveArms[1].filtJntCurrent[i+3];
	GVL_InstruTestUIVars.g_instruZeroPos[i]:= m_slaveArms[1].instrument.onChipData.m_InstruPos[i];
END_FOR

FOR i:=1 TO 3 DO
		GVL_InstruTestUIVars.g_curInstruDHPos[i]:= m_slaveArms[1].curDHJntPos[i+3];
END_FOR

GVL_InstruTestUIVars.g_curGripAng := m_slaveArms[1].curGripAngle;

GVL_InstruTestUIVars.g_instruSN := m_slaveArms[1].instrument.onChipData.m_InstruseriesNum;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="stateMachine" Id="{b9cc8560-9309-49e3-93b5-28cb02b4f5cc}">
      <Declaration><![CDATA[// state machine check and transit 
METHOD PROTECTED stateMachine : BOOL
VAR_IN_OUT CONSTANT
		i_slavesInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i,j:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check instrument state
FOR i:=1 TO g_sArmNum DO
	// statues check
	IF m_slaveArms[i].panelOn = FALSE THEN
		m_panelMountedFlag[i]:=FALSE;
	END_IF
	IF m_slaveArms[i].instruOn = FALSE THEN
		m_instrumentMountedFlag[i]:=FALSE;
	END_IF
END_FOR

// state machine transit
FOR i:=1 TO g_sArmNum DO
	CASE m_slaveArmState[i] OF
		// init
		SlaveArmState_Init:
			m_slaveArms[i].instrument.resetArmLED :=TRUE;
			// to standby
			IF m_armCtrl[i].isFinished  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		//standby
		SlaveArmState_Standby:
			// to mount panel
			IF m_slaveArms[i].panelOn THEN 
				IF m_panelMountedFlag[i] THEN
					m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				ELSE
					m_nextSlaveArmState[i]:=SlaveArmState_MountPanel;
				END_IF
			END_IF
		
		//mount panel
		SlaveArmState_MountPanel:
			// to panel ready
			IF m_armCtrl[i]. isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				m_panelMountedFlag[i] :=TRUE;
				
			// to standby
			ELSIF NOT(m_slaveArms[i].panelOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		//panel ready
		SlaveArmState_PanelReady:
			// to standby
			IF NOT(m_slaveArms[i].panelOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			
			// to instrument caliberation
			ELSIF GVL_InstruTestUIVars.g_instruCaliFlag THEN
				m_nextSlaveArmState[i] := SlaveArmState_InstruCali;
			ELSIF m_slaveArms[i].instruOn   THEN
				IF m_instrumentMountedFlag[i] THEN
					// to scope ready
					IF  InstruType_endoscope = m_slaveArms[i].instrument.m_instruType AND m_slaveArms[i].instruReady() THEN 
						m_nextSlaveArmState[i]:=SlaveArmState_ScopeReady;
					// to instrument ready
					ELSE
						m_nextSlaveArmState[i]:=SlaveArmState_InstruReady;
					END_IF
				// to mount instrument/endoscope
				ELSE
					m_nextSlaveArmState[i]:=SlaveArmState_MountInstru;
				END_IF
			END_IF
			
		//mount instrument
		SlaveArmState_MountInstru:
			// to panel ready
			IF NOT(m_slaveArms[i].instruOn)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
			ELSIF m_armCtrl[i].isFinished THEN
				m_instrumentMountedFlag[i] :=TRUE;
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				
			END_IF
		
		// instrument ready
		SlaveArmState_InstruReady:
			// to instrument standby
			IF  NOT(m_slaveArms[i].instruOn)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
				
			// to instrument caliberation
			ELSIF GVL_InstruTestUIVars.g_instruCaliFlag THEN
				m_nextSlaveArmState[i] := SlaveArmState_InstruCali;
				
			// to instrument auto test
			ELSIF GVL_InstruTestUIVars.g_instruAutoTestFlag THEN
				m_nextSlaveArmState[i] := SlaveArmState_InstruAutoTest;
				
			// to instrument manual test
			ELSIF GVL_InstruTestUIVars.g_instruManualTestFlag THEN
				m_nextSlaveArmState[i] := SlaveArmState_InstruManualTest;
				
			// to instrument verify
			ELSIF GVL_InstruTestUIVars.g_instruVerifyFlag THEN
				m_nextSlaveArmState[i] := SlaveArmState_InstruVerify;
			END_IF
		
		//instrument caliberation
		SlaveArmState_InstruCali:
			// to standby
			IF  NOT(GVL_InstruTestUIVars.g_instruCaliFlag)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
			
		//instrument auto test
		SlaveArmState_InstruAutoTest:
			// to standby
			IF  NOT( m_slaveArms[1].instruOn) OR NOT(GVL_InstruTestUIVars.g_instruAutoTestFlag)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		//instrument manual test
		SlaveArmState_InstruManualTest:
			// to standby
			IF  NOT( m_slaveArms[1].instruOn) OR NOT(GVL_InstruTestUIVars.g_instruManualTestFlag)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
			
		//instrument verify
		SlaveArmState_InstruVerify:
			// to standby
			IF  NOT( m_slaveArms[1].instruOn) OR NOT(GVL_InstruTestUIVars.g_instruVerifyFlag)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
	
	END_CASE
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateArmLight" Id="{0d4d98a3-ae97-4bc5-8d05-6e3f5cc1e792}">
      <Declaration><![CDATA[METHOD updateArmLight : BOOL
VAR_INPUT
	i_slaveInputDataPool:ST_SlaveInputDataPool;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//*******************机械臂与动力盒上的灯光写入********************
//不可恢复性故障-----红色常亮
//可恢复故障----琥珀色-先闪烁5s、再进行常亮
//正处于器械控制或者端口控制状态-----蓝色闪烁
//该手术臂正在执行一项需要用户短时间等待的活动、例如器械卡接----蓝色-脉动闪烁
//工具更换引导正在进行中-----绿色闪烁
//未通电、已禁用、已收起----------关
//系统正常运行-----蓝色常亮
//灯光颜色--0-灯灭、1蓝灯常亮、2蓝灯闪烁、3琥珀色闪烁、4红灯闪烁、5绿灯常亮、6绿灯闪烁、7红灯常亮、8琥珀色常亮、9蓝灯脉动式闪烁

FOR i := 1 TO g_sArmNum BY 1 DO
	IF m_slaveArmState[i] = SlaveArmState_Error THEN
		m_lightCrlWord[i] := ArmLight_AmberBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_MountPanel OR m_slaveArmState[i] = SlaveArmState_MountInstru THEN
		m_lightCrlWord[i] := ArmLight_BluePulse;
	ELSIF m_slaveArmState[i] = SlaveArmState_InstruRetract OR m_slaveArmState[i] = SlaveArmState_Adjust THEN
		m_lightCrlWord[i] := ArmLight_BlueBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_InstruInvasion THEN
		m_lightCrlWord[i] := ArmLight_GreenBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_Disable THEN
		m_lightCrlWord[i] := ArmLight_Off;
	ELSE
		m_lightCrlWord[i] := ArmLight_BlueOn;
	END_IF

	m_slaveArms[i].checkLight(m_lightCrlWord[i]);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveRobot">
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.controllerTransit">
      <LineId Id="21" Count="0" />
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="80" Count="2" />
      <LineId Id="87" Count="5" />
      <LineId Id="94" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="62" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="189" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.run">
      <LineId Id="202" Count="5" />
      <LineId Id="200" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="226" Count="5" />
      <LineId Id="55" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.stateMachine">
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="338" Count="6" />
      <LineId Id="337" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="356" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="879" Count="1" />
      <LineId Id="876" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="589" Count="1" />
      <LineId Id="592" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="795" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="252" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="295" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="262" Count="1" />
      <LineId Id="360" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="555" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="890" Count="0" />
      <LineId Id="881" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="891" Count="0" />
      <LineId Id="894" Count="1" />
      <LineId Id="892" Count="0" />
      <LineId Id="896" Count="0" />
      <LineId Id="898" Count="1" />
      <LineId Id="897" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="902" Count="1" />
      <LineId Id="901" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="884" Count="4" />
      <LineId Id="883" Count="0" />
      <LineId Id="889" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="307" Count="0" />
      <LineId Id="506" Count="2" />
      <LineId Id="904" Count="0" />
      <LineId Id="906" Count="4" />
      <LineId Id="905" Count="0" />
      <LineId Id="911" Count="0" />
      <LineId Id="913" Count="4" />
      <LineId Id="912" Count="0" />
      <LineId Id="858" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.updateArmLight">
      <LineId Id="8" Count="7" />
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="9" />
      <LineId Id="69" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>